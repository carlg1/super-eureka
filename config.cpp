/////////////////////////////////////////////////////////////////////////////////
// #includes
/////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <getopt.h>

#include "config.h"


/////////////////////////////////////////////////////////////////////////////////
// namespaces
/////////////////////////////////////////////////////////////////////////////////
using namespace std;


/////////////////////////////////////////////////////////////////////////////////
// Class Funtions
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// tbdFlowConfig()
/////////////////////////////////////////////////////////////////////////////////
tbdFlowConfig::tbdFlowConfig()
{
	port = 0;
	loop = true;
	configfile = nullptr;
}

/////////////////////////////////////////////////////////////////////////////////
// ParseCmdArgs()
/////////////////////////////////////////////////////////////////////////////////
bool tbdFlowConfig::ParseCmdArgs(int argc, char *argv[])
{
	int rv;

	char shortopts[] = "P:C:";
	struct option cmdlineargs[] = {
		{"port",     required_argument, nullptr, 'P'},
		{"conffile", required_argument, nullptr, 'C'},
		{nullptr,    0,                 nullptr,  0 },
	};

	while(1)
	{
		rv = getopt_long(argc, argv, shortopts, cmdlineargs, nullptr);
		if(rv < 0)
			break;

		switch(rv)
		{
			case 'P':
				{
					int tmp = atoi(optarg); 

					if(tmp < 1 || tmp > 0xffff)
					{
						cerr << "Invalid Port # '" << optarg << "'" << endl;
						return false;
					}

					port = tmp;
					break;
				}

			case 'C':
				configfile = optarg;
				break;

			case '?': //arg required but not provided
			case 0:   //unknown arg
				return false;
		}
	}

	return true;
}

/////////////////////////////////////////////////////////////////////////////////
// ParseConfigFile()
/////////////////////////////////////////////////////////////////////////////////
bool tbdFlowConfig::ParseConfigFile()
{
	if(configfile)
	{
		//open file
		//parse file
		//save results
	}

	return true;
}
